{"version":3,"sources":["components/header.js","utils/API.js","components/employeeTable.js","app.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Header","classes","className","AppBar","position","Container","fixed","Toolbar","variant","Typography","color","axios","get","EmployeeTable","state","columns","title","field","type","data","API","then","res","setState","catch","err","console","log","style","marginTop","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0TAQMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,QAIpB,SAASC,IACpB,IAAMC,EAAUT,IAEhB,OACI,yBAAKU,UAAWD,EAAQN,MACpB,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACb,kBAACC,EAAA,EAAD,CAAYD,QAAQ,KAAKE,MAAM,WAA/B,0B,0DCvBT,EACG,kBAAMC,IAAMC,IAAI,sD,kBC6BnBC,E,4MA3BXC,MAAQ,CACJC,QAAS,CACL,CAAEC,MAAO,KAAMC,MAAO,MACtB,CAAED,MAAO,WAAYC,MAAO,iBAC5B,CAAED,MAAO,MAAOC,MAAO,gBACvB,CAAED,MAAO,SAAUC,MAAO,kBAAmBC,KAAM,YAEvDC,KAAM,I,uDAGV,WAAqB,IAAD,OAChBC,IACKC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAACJ,KAAMG,EAAIH,KAAKA,UAC1CK,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,oBAGlC,WACI,OACI,kBAAC,IAAD,CAAeG,MAAO,CAACC,UAAW,IAC9Bb,MAAM,qBACND,QAASe,KAAKhB,MAAMC,QACpBI,KAAMW,KAAKhB,MAAMK,W,GAtBLY,aCgBbC,MAXf,WACI,OACI,oCACI,kBAAChC,EAAD,MACA,kBAACK,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,EAAD,SCdI2B,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCARC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuGzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.c84d64b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function Header() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Container fixed>\r\n                    <Toolbar variant=\"dense\">\r\n                        <Typography variant=\"h6\" color=\"inherit\">\r\n                            Employee Directory\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </Container>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import axios from 'axios';\r\n\r\nexport default {\r\n    getEmployees: () => axios.get(\"https://dummy.restapiexample.com/api/v1/employees\")\r\n};","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport MaterialTable from 'material-table';\r\n\r\nclass EmployeeTable extends Component {\r\n    state = {\r\n        columns: [\r\n            { title: 'ID', field: 'id' },\r\n            { title: 'Employee', field: 'employee_name' },\r\n            { title: 'Age', field: 'employee_age' },\r\n            { title: 'Salary', field: 'employee_salary', type: 'numeric' }\r\n        ],\r\n        data: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(res => this.setState({data: res.data.data}))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <MaterialTable style={{marginTop: 25}}\r\n                title=\"Employee Directory\"\r\n                columns={this.state.columns}\r\n                data={this.state.data}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default EmployeeTable;","import React from 'react';\r\nimport './app.css';\r\nimport Header from './components/header';\r\n// import EmployeeTable from './components/Table';\r\nimport EmployeeTable from './components/employeeTable';\r\n\r\n// material imports\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container fixed>\r\n                <EmployeeTable />\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                \r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n         \r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}